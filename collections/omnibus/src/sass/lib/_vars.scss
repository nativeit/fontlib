//============================================
// Global variables
//============================================


// Colors
//============================================

// 1. To prevent linting errors these values are stored.
//    in variables. Be careful when changing (better don't).

$black:           #000; // 1.
$white:           #fff; // 1.

$primary:         #ff5252;

$gray-powder:     #f7f7f7;
$gray-dust:       #ddd;
$gray-concrete:   #767676;
$gray-space:      #212121;

$color-text:      $gray-space;
$color-bg:        $white;
$color-error:     #ed331a;
$color-success:   #2fa714;

$color-asap:      #ffb3ba;
$color-faustina:  #ffdfba;
$color-manuale:   #c6ebbf;
$color-archivo:   #bae1ff;
$color-saira:     #ffffba;

$color-text-asap:     #211718;
$color-text-faustina: #211d18;
$color-text-manuale:  #1a1e19;
$color-text-saira:    #181d21;
$color-text-archivo:  #212118;


// Dimensions
//============================================

$space:              2.4rem; // 24px
$space-quarter:      $space * 0.25;
$space-third:        decimal-round($space / 3, 1);
$space-half:         $space * 0.5;
$space-threeQuarter: decimal-round($space * 0.75, 1);
$space-oneAndHalf:   $space * 1.5;
$space-double:       $space * 2;


// Timing functions
//============================================

$bezier: cubic-bezier(0.4, 0, 0.2, 1);


// Typography
//============================================

$font-sans:     -apple-system, BlinkMacSystemFont, "avenir next", avenir, helvetica, "helvetica neue", ubuntu, roboto, noto, "segoe ui", arial, sans-serif;
$font-serif:    Georgia, Times, "Times New Roman", serif;
$font-mono:     "Roboto Mono", "Source Code Pro", "Fira Mono", monospace, monospace;
$font-roboto:   "Roboto", $font-sans;
$font-manuale:  "Manuale", $font-serif;
$font-faustina: "Faustina", $font-serif;
$font-asap:     "Asap Condensed", $font-sans;
$font-archivo:  "Archivo", $font-sans;
$font-saira:    "Saira", $font-sans;
$font-saira-cond:      "Saira Condensed", $font-sans;
$font-saira-semicond:  "Saira Semi Condensed", $font-sans;
$font-saira-extracond: "Saira Extra Condensed", $font-sans;

$fs: 1.6rem;
$lh: ($space / $fs);

$fs-h1: 4.8rem;
$fs-h2: 3.6rem;
$fs-h3: 3rem;
$fs-h4: 2.5rem;
$fs-h5: 2rem;
$fs-h6: 1.6rem;

$lh-h1: 1.1;
$lh-h2: 1.1;
$lh-h3: 1.2;
$lh-h4: 1.3;
$lh-h5: 1.3;
$lh-h6: 1.3;


// Layout
//============================================

// XS
$layout-gutter-xs: 2.4rem;
$layout-width-xs:  41.6rem;

// SM
$layout-gutter-sm: 2.4rem;
$layout-width-sm:  48rem;

// MD
$layout-gutter-md: 2.4rem;
$layout-width-md:  48rem;

// LG
$layout-gutter-lg: 2.4rem;
$layout-width-lg:  48rem;


// Breakpoints
//============================================

// 1. Breakpoints are defined in em's, they are not affected by the
//    reset on the html element. They use 16px (browser default)
//    as a base for calculations. Keep in mind when creating new breakpoints.

// 2. 1px in em (1 / 16 = 0.0625em) to create max-width queries.

// 3. Full media query expresions for use in modules.

$breakpoints: ( // 1.
  "xs":     26em, // == 416px
  "sm":   45.5em, // == 728px
  "md": 60.375em, // == 966px
  "lg": 80.625em, // == 1290px
);

$px-in-em: 0.0625em; // 2.

$bp-xs:       "(min-width: #{map-get($breakpoints, 'xs')})"; // 3.
$bp-sm:       "(min-width: #{map-get($breakpoints, 'sm')})"; // 3.
$bp-md:       "(min-width: #{map-get($breakpoints, 'md')})"; // 3.
$bp-lg:       "(min-width: #{map-get($breakpoints, 'lg')})"; // 3.

$bp-xs-down:  "(max-width: #{map-get($breakpoints, 'xs') - $px-in-em})"; // 3.
$bp-sm-down:  "(max-width: #{map-get($breakpoints, 'sm') - $px-in-em})"; // 3.
$bp-md-down:  "(max-width: #{map-get($breakpoints, 'md') - $px-in-em})"; // 3.
$bp-lg-down:  "(max-width: #{map-get($breakpoints, 'lg') - $px-in-em})"; // 3.


// Grid
//============================================

$grid-columns: 12;

$grid-config-xs: (
  "name": "",
  "cols": $grid-columns,
  "gutter": $layout-gutter-xs,
  "bp": false,
  "off": false,
  "pull": false,
  "push": false,
  "clear": 2
);

$grid-config-sm: (
  "name": "sm",
  "cols": $grid-columns,
  "gutter": $layout-gutter-sm,
  "bp": $bp-sm,
  "off": true,
  "pull": true,
  "push": true,
  "clear": 2
);

$grid-config-md: (
  "name": "md",
  "cols": $grid-columns,
  "gutter": $layout-gutter-md,
  "bp": $bp-md,
  "off": true,
  "pull": true,
  "push": true,
  "clear": 3 4
);

$grid-config-lg: (
  "name": "lg",
  "cols": $grid-columns,
  "gutter": $layout-gutter-lg,
  "bp": $bp-lg,
  "off": true,
  "pull": true,
  "push": true,
  "clear": 3 4
);

// Grid sizes for print
$grid-config-print: (
  "name": "print",
  "cols": $grid-columns,
  "gutter": $layout-gutter-md,
  "bp": "print",
  "off": true,
  "pull": true,
  "push": true,
  "clear": 2 3
);


// Dimension Utility
//============================================

$dimension-utility-sizes: (
  "1": 0.1rem,
  "2": 0.2rem,
  "3": 0.3rem,
  "4": 0.4rem,
  "quarter": $space-quarter,
  "half": $space-half,
  "threeQuarter": $space-threeQuarter,
  "": $space,
  "double": $space * 2,
  "none": 0
);

$dimension-utility-config-xs: (
  "name": "",
  "pull": true,
  "push": true,
  "padd": true,
  "bp": false,

  "sizes": $dimension-utility-sizes
);

$dimension-utility-config-sm: (
  "name": "sm",
  "pull": true,
  "push": true,
  "padd": true,
  "bp": $bp-sm,

  "sizes": $dimension-utility-sizes
);

$dimension-utility-config-md: (
  "name": "md",
  "pull": true,
  "push": true,
  "padd": true,
  "bp": $bp-md,

  "sizes": $dimension-utility-sizes
);

$dimension-utility-config-lg: (
  "name": "lg",
  "pull": true,
  "push": true,
  "padd": true,
  "bp": $bp-lg,

  "sizes": $dimension-utility-sizes
);
